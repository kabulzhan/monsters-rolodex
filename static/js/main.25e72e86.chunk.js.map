{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleChange","e","state","userList","setState","filteredUserList","filter","user","name","toLowerCase","includes","target","value","fetch","then","response","json","className","this","React","Component","SearchBar","type","placeholder","onChange","CardList","cards","map","key","id","Card","email","alt","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oPAGMA,G,wDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAYRC,aAAe,SAACC,GACV,EAAKC,MAAMC,UACb,EAAKC,SAAS,CACZC,iBAAkB,EAAKH,MAAMC,SAASG,QAAO,SAACC,GAAD,OAC3CA,EAAKC,KAAKC,cAAcC,SAAST,EAAEU,OAAOC,MAAMH,qBAftD,EAAKP,MAAQ,CAAEC,SAAU,GAAIE,iBAAkB,IAF9B,E,gEAKE,IAAD,OAClBQ,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GAAD,OACJ,EAAKZ,SAAS,CAAED,SAAUa,EAAMX,iBAAkBW,S,+BActD,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,gDACA,kBAAC,EAAD,CAAWjB,aAAckB,KAAKlB,eAC9B,kBAAC,EAAD,CAAUG,SAAUe,KAAKhB,MAAMG,yB,GA7BvBc,IAAMC,YAoClBC,EAAY,SAACtB,GACjB,OACE,yBAAKkB,UAAU,aACb,2BACEK,KAAK,OACLC,YAAY,qBACZC,SAAUzB,EAAMC,iBAMlByB,EAAW,SAAC,GAAkB,IAAhBtB,EAAe,EAAfA,SACduB,EAAQ,GAGZ,OAFIvB,IACFuB,EAAQvB,EAASwB,KAAI,SAACpB,GAAD,OAAU,kBAAC,EAAD,iBAAUA,EAAV,CAAgBqB,IAAKrB,EAAKsB,UACpD,yBAAKZ,UAAU,YAAYS,EAA3B,MAGHI,EAAO,SAAC,GAAqB,IAAnBtB,EAAkB,EAAlBA,KAAMuB,EAAY,EAAZA,MACpB,OACE,yBAAKd,UAAU,QACb,yBACEe,IAAI,iBACJC,IAAG,+BAA0BzB,EAA1B,gCAEL,yBAAKS,UAAU,QACb,gCAAST,IAEX,yBAAKS,UAAU,SAASc,KAKfjC,IC7DKoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.25e72e86.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { userList: \"\", filteredUserList: \"\" };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((json) =>\n        this.setState({ userList: json, filteredUserList: json })\n      );\n  }\n\n  handleChange = (e) => {\n    if (this.state.userList)\n      this.setState({\n        filteredUserList: this.state.userList.filter((user) =>\n          user.name.toLowerCase().includes(e.target.value.toLowerCase())\n        ),\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <h1>Monsters Rolodex</h1>\n          <SearchBar handleChange={this.handleChange} />\n          <CardList userList={this.state.filteredUserList} />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst SearchBar = (props) => {\n  return (\n    <div className=\"searchBar\">\n      <input\n        type=\"text\"\n        placeholder=\"search monsters...\"\n        onChange={props.handleChange}\n      />\n    </div>\n  );\n};\n\nconst CardList = ({ userList }) => {\n  let cards = \"\";\n  if (userList)\n    cards = userList.map((user) => <Card {...user} key={user.id} />);\n  return <div className=\"cardGrid\">{cards} </div>;\n};\n\nconst Card = ({ name, email }) => {\n  return (\n    <div className=\"card\">\n      <img\n        alt=\"monster avatar\"\n        src={`https://robohash.org/${name}.png?size=180x180&set=set2`}\n      />\n      <div className=\"name\">\n        <strong>{name}</strong>\n      </div>\n      <div className=\"email\">{email}</div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}